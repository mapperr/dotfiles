#! /bin/bash

refresh_interval_in_secs="$1"

if test -z "$refresh_interval_in_secs"; then
    refresh_interval_in_secs=300
fi

if test "-h" = "$refresh_interval_in_secs" || \
    test "--help" = "$refresh_interval_in_secs" || \
    test "help" = "$refresh_interval_in_secs"; then
    echo "usage: $0 [refresh interval in seconds]"
    exit 1
fi

# zero to disable
offlineimap_quick_weight=0
offlineimap_weight=1
vdirsyncer_weight=3


omni_notify() {
    local priority="$1"
    local text="$2"
    local details="$3"

    local notify_send_urgency='low'
    if test $priority = 1; then
        notify_send_urgency='normal'
    elif test $priority = 2; then
        notify_send_urgency='critical'
    fi

    if test -z "$details"; then
        details="$text"
        text="omnisyncer"
    fi

    echo "$text | $details"
    notify-send -u "$notify_send_urgency" "$text" "$details"
}

sync_offlineimap_quick() {
    hash offlineimap || return
    # omni_notify 0 'syncing offlineimap quick'
    offlineimap -q
}

sync_offlineimap() {
    hash offlineimap || return
    # omni_notify 0 'syncing offlineimap'
    offlineimap
    omni_notify 0 'synced offlineimap'
}

sync_vdirsyncer() {
    hash vdirsyncer || return
    # omni_notify 0 'syncing vdirsyncer'
    vdirsyncer sync
    vdirsyncer metasync
    omni_notify 0 'synced vdirsyncer'
}

offlineimap_quick_counter=0
offlineimap_counter=0
vdirsyncer_counter=0

while true; do
    echo 'start syncing'

    offlineimap_quick_counter=`expr $offlineimap_quick_counter + 1`
    if [ 0 = `expr $offlineimap_quick_weight - $offlineimap_quick_counter` ]; then
        sync_offlineimap_quick >/dev/null
        offlineimap_quick_counter=0
    fi

    offlineimap_counter=`expr $offlineimap_counter + 1`
    if [ 0 = `expr $offlineimap_weight - $offlineimap_counter` ]; then
        sync_offlineimap >/dev/null
        offlineimap_counter=0
    fi

    vdirsyncer_counter=`expr $vdirsyncer_counter + 1`
    if [ 0 = `expr $vdirsyncer_weight - $vdirsyncer_counter` ]; then
        sync_vdirsyncer >/dev/null
        vdirsyncer_counter=0
    fi

    next_sync_time=`date -d "now + ${refresh_interval_in_secs}seconds" '+%H:%M'`
    echo
    echo "Waiting $refresh_interval_in_secs seconds..."
    echo "Syncing again at $next_sync_time"
    echo "Hit Enter to sync now"
    read -t $refresh_interval_in_secs -p "$wait_msg"

done

